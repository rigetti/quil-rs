# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import quil.expression
import typing
from enum import Enum

class Arithmetic:
    @property
    def operator(self) -> ArithmeticOperator: ...
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def source(self) -> ArithmeticOperand: ...

class ArithmeticOperand:
    class LiteralInteger(ArithmeticOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0:builtins.int) -> ArithmeticOperand.LiteralInteger: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class LiteralReal(ArithmeticOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.float: ...
        def __new__(cls, _0:builtins.float) -> ArithmeticOperand.LiteralReal: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class MemoryReference(ArithmeticOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> MemoryReference: ...
        def __new__(cls, _0:MemoryReference) -> ArithmeticOperand.MemoryReference: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class ArithmeticOperator:
    class Add(ArithmeticOperator):
        __match_args__ = ((),)
        def __new__(cls) -> ArithmeticOperator.Add: ...
    
    class Subtract(ArithmeticOperator):
        __match_args__ = ((),)
        def __new__(cls) -> ArithmeticOperator.Subtract: ...
    
    class Divide(ArithmeticOperator):
        __match_args__ = ((),)
        def __new__(cls) -> ArithmeticOperator.Divide: ...
    
    class Multiply(ArithmeticOperator):
        __match_args__ = ((),)
        def __new__(cls) -> ArithmeticOperator.Multiply: ...
    
    ...

class AttributeValue:
    class String(AttributeValue):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> AttributeValue.String: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Expression(AttributeValue):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Expression: ...
        def __new__(cls, _0:Expression) -> AttributeValue.Expression: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class BinaryLogic:
    @property
    def operator(self) -> BinaryOperator: ...
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def source(self) -> BinaryOperand: ...

class BinaryOperator:
    class And(BinaryOperator):
        __match_args__ = ((),)
        def __new__(cls) -> BinaryOperator.And: ...
    
    class Ior(BinaryOperator):
        __match_args__ = ((),)
        def __new__(cls) -> BinaryOperator.Ior: ...
    
    class Xor(BinaryOperator):
        __match_args__ = ((),)
        def __new__(cls) -> BinaryOperator.Xor: ...
    
    ...

class Calibration:
    @property
    def identifier(self) -> CalibrationIdentifier: ...
    @property
    def instructions(self) -> builtins.list[Instruction]: ...
    @identifier.setter
    def identifier(self, value: CalibrationIdentifier) -> None: ...
    @instructions.setter
    def instructions(self, value: builtins.list[Instruction]) -> None: ...

class CalibrationIdentifier:
    r"""
    Unique identifier for a calibration definition within a program
    """
    @property
    def modifiers(self) -> builtins.list[GateModifier]:
        r"""
        The modifiers applied to the gate
        """
    @property
    def name(self) -> builtins.str:
        r"""
        The name of the gate
        """
    @property
    def parameters(self) -> builtins.list[Expression]:
        r"""
        The parameters of the gate - these are the variables in the calibration definition
        """
    @property
    def qubits(self) -> builtins.list[Qubit]:
        r"""
        The qubits on which the gate is applied
        """
    @modifiers.setter
    def modifiers(self, value: builtins.list[GateModifier]) -> None:
        r"""
        The modifiers applied to the gate
        """
    @name.setter
    def name(self, value: builtins.str) -> None:
        r"""
        The name of the gate
        """
    @parameters.setter
    def parameters(self, value: builtins.list[Expression]) -> None:
        r"""
        The parameters of the gate - these are the variables in the calibration definition
        """
    @qubits.setter
    def qubits(self, value: builtins.list[Qubit]) -> None:
        r"""
        The qubits on which the gate is applied
        """

class Call:
    r"""
    A call instruction with a name and arguments.
    """
    @property
    def name(self) -> builtins.str: ...

class CallArgument:
    r"""
    A parsed, but unresolved call argument. This may be resolved into a [`ResolvedCallArgument`]
    with the appropriate [`ExternSignature`]. Resolution is required for building the
    [`crate::Program`] memory graph.
    """
    class Identifier(CallArgument):
        r"""
        A reference to a declared memory location. Note, this may be resolved to either
        a scalar or vector. In the former case, the assumed index is 0.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> CallArgument.Identifier: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class MemoryReference(CallArgument):
        r"""
        A reference to a memory location. This may be resolved to a scalar.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> MemoryReference: ...
        def __new__(cls, _0:MemoryReference) -> CallArgument.MemoryReference: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Immediate(CallArgument):
        r"""
        An immediate value. This may be resolved to a non-mutable scalar.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.complex: ...
        def __new__(cls, _0:builtins.complex) -> CallArgument.Immediate: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class Capture:
    @property
    def blocking(self) -> builtins.bool: ...
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def memory_reference(self) -> MemoryReference: ...
    @property
    def waveform(self) -> WaveformInvocation: ...
    @blocking.setter
    def blocking(self, value: builtins.bool) -> None: ...
    @frame.setter
    def frame(self, value: FrameIdentifier) -> None: ...
    @memory_reference.setter
    def memory_reference(self, value: MemoryReference) -> None: ...
    @waveform.setter
    def waveform(self, value: WaveformInvocation) -> None: ...

class CircuitDefinition:
    @property
    def name(self) -> builtins.str: ...
    @property
    def parameters(self) -> builtins.list[builtins.str]: ...
    @property
    def qubit_variables(self) -> builtins.list[builtins.str]: ...
    @property
    def instructions(self) -> builtins.list[Instruction]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @parameters.setter
    def parameters(self, value: builtins.list[builtins.str]) -> None: ...
    @qubit_variables.setter
    def qubit_variables(self, value: builtins.list[builtins.str]) -> None: ...
    @instructions.setter
    def instructions(self, value: builtins.list[Instruction]) -> None: ...

class Comparison:
    @property
    def operator(self) -> ComparisonOperator: ...
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def lhs(self) -> MemoryReference: ...
    @property
    def rhs(self) -> ComparisonOperand: ...

class ComparisonOperand:
    class LiteralInteger(ComparisonOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0:builtins.int) -> ComparisonOperand.LiteralInteger: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class LiteralReal(ComparisonOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.float: ...
        def __new__(cls, _0:builtins.float) -> ComparisonOperand.LiteralReal: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class MemoryReference(ComparisonOperand):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> MemoryReference: ...
        def __new__(cls, _0:MemoryReference) -> ComparisonOperand.MemoryReference: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class Convert:
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def source(self) -> MemoryReference: ...

class Declaration:
    @property
    def name(self) -> builtins.str: ...
    @property
    def size(self) -> Vector: ...
    @property
    def sharing(self) -> typing.Optional[Sharing]: ...

class Delay:
    @property
    def duration(self) -> Expression: ...
    @property
    def frame_names(self) -> builtins.list[builtins.str]: ...
    @property
    def qubits(self) -> builtins.list[Qubit]: ...

class Exchange:
    @property
    def left(self) -> MemoryReference: ...
    @property
    def right(self) -> MemoryReference: ...

class ExternParameter:
    r"""
    An extern parameter with a name, mutability, and data type.
    """
    @property
    def name(self) -> builtins.str:
        r"""
        The name of the parameter. This must be a valid user identifier.
        """
    @property
    def mutable(self) -> builtins.bool:
        r"""
        Whether the parameter is mutable.
        """
    @property
    def data_type(self) -> ExternParameterType:
        r"""
        The data type of the parameter.
        """
    def __new__(cls, name:builtins.str, mutable:builtins.bool, data_type:ExternParameterType) -> ExternParameter:
        r"""
        Create a new extern parameter. This will fail if the parameter name
        is not a valid user identifier.
        """

class ExternParameterType:
    r"""
    A parameter type within an extern signature.
    """
    class Scalar(ExternParameterType):
        r"""
        A scalar parameter, which may accept a memory reference or immediate value.
        
        For instance `PRAGMA EXTERN foo "(bar : INTEGER)"`.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> ScalarType: ...
        def __new__(cls, _0:ScalarType) -> ExternParameterType.Scalar: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class FixedLengthVector(ExternParameterType):
        r"""
        A fixed-length vector, which must accept a memory region name of the appropriate
        length and data type.
        
        For instance `PRAGMA EXTERN foo "(bar : INTEGER[2])"`.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Vector: ...
        def __new__(cls, _0:Vector) -> ExternParameterType.FixedLengthVector: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class VariableLengthVector(ExternParameterType):
        r"""
        A variable-length vector, which must accept a memory region name of the appropriate
        data type.
        
        For instance `PRAGMA EXTERN foo "(bar : INTEGER[])"`.
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> ScalarType: ...
        def __new__(cls, _0:ScalarType) -> ExternParameterType.VariableLengthVector: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class ExternSignature:
    r"""
    An extern signature with a return type and parameters.
    """
    @property
    def return_type(self) -> typing.Optional[ScalarType]:
        r"""
        The return type of the extern signature, if any.
        """
    @property
    def parameters(self) -> builtins.list[ExternParameter]:
        r"""
        The parameters of the extern signature.
        """
    def __new__(cls, return_type:typing.Optional[ScalarType], parameters:typing.Sequence[ExternParameter]) -> ExternSignature:
        r"""
        Create a new extern signature.
        """

class Fence:
    @property
    def qubits(self) -> builtins.list[Qubit]: ...

class FrameDefinition:
    @property
    def identifier(self) -> FrameIdentifier: ...
    @property
    def attributes(self) -> builtins.dict[builtins.str, AttributeValue]: ...
    @identifier.setter
    def identifier(self, value: FrameIdentifier) -> None: ...
    @attributes.setter
    def attributes(self, value: builtins.dict[builtins.str, AttributeValue]) -> None: ...

class FrameIdentifier:
    @property
    def name(self) -> builtins.str: ...
    @property
    def qubits(self) -> builtins.list[Qubit]: ...
    def __new__(cls, name:builtins.str, qubits:typing.Sequence[Qubit]) -> FrameIdentifier: ...

class Gate:
    r"""
    A struct encapsulating all the properties of a Quil Quantum Gate.
    """
    @property
    def name(self) -> builtins.str: ...
    @property
    def parameters(self) -> builtins.list[Expression]: ...
    @property
    def qubits(self) -> builtins.list[Qubit]: ...
    @property
    def modifiers(self) -> builtins.list[GateModifier]: ...

class GateDefinition:
    r"""
    A struct encapsulating a quil Gate Definition
    """
    @property
    def name(self) -> builtins.str: ...
    @property
    def parameters(self) -> builtins.list[builtins.str]: ...
    @property
    def specification(self) -> GateSpecification: ...
    def __new__(cls, name:builtins.str, parameters:typing.Sequence[builtins.str], specification:GateSpecification) -> GateDefinition: ...

class GateSpecification:
    r"""
    An enum representing a the specification of a [`GateDefinition`] for a given [`GateType`]
    """
    class Matrix(GateSpecification):
        r"""
        A matrix of [`Expression`]s representing a unitary operation for a [`GateType::Matrix`].
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.list[builtins.list[Expression]]: ...
        def __new__(cls, _0:typing.Sequence[typing.Sequence[Expression]]) -> GateSpecification.Matrix: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Permutation(GateSpecification):
        r"""
        A vector of integers that defines the permutation used for a [`GateType::Permutation`]
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.list[builtins.int]: ...
        def __new__(cls, _0:typing.Sequence[builtins.int]) -> GateSpecification.Permutation: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class PauliSum(GateSpecification):
        r"""
        A Hermitian operator specified as a Pauli sum, a sum of combinations of Pauli operators,
        used for a [`GateType::PauliSum`]
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> PauliSum: ...
        def __new__(cls, _0:PauliSum) -> GateSpecification.PauliSum: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class Include:
    @property
    def filename(self) -> builtins.str: ...

class Instruction:
    def is_quil_t(self) -> builtins.bool:
        r"""
        Returns true if the instruction is a Quil-T instruction.
        """
    class Arithmetic(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Arithmetic: ...
        def __new__(cls, _0:Arithmetic) -> Instruction.Arithmetic: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class BinaryLogic(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> BinaryLogic: ...
        def __new__(cls, _0:BinaryLogic) -> Instruction.BinaryLogic: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class CalibrationDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Calibration: ...
        def __new__(cls, _0:Calibration) -> Instruction.CalibrationDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Call(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Call: ...
        def __new__(cls, _0:Call) -> Instruction.Call: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Capture(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Capture: ...
        def __new__(cls, _0:Capture) -> Instruction.Capture: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class CircuitDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> CircuitDefinition: ...
        def __new__(cls, _0:CircuitDefinition) -> Instruction.CircuitDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Convert(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Convert: ...
        def __new__(cls, _0:Convert) -> Instruction.Convert: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Comparison(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Comparison: ...
        def __new__(cls, _0:Comparison) -> Instruction.Comparison: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Declaration(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Declaration: ...
        def __new__(cls, _0:Declaration) -> Instruction.Declaration: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Delay(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Delay: ...
        def __new__(cls, _0:Delay) -> Instruction.Delay: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Exchange(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Exchange: ...
        def __new__(cls, _0:Exchange) -> Instruction.Exchange: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Fence(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Fence: ...
        def __new__(cls, _0:Fence) -> Instruction.Fence: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class FrameDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> FrameDefinition: ...
        def __new__(cls, _0:FrameDefinition) -> Instruction.FrameDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Gate(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Gate: ...
        def __new__(cls, _0:Gate) -> Instruction.Gate: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class GateDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> GateDefinition: ...
        def __new__(cls, _0:GateDefinition) -> Instruction.GateDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Halt(Instruction):
        __match_args__ = ((),)
        def __new__(cls) -> Instruction.Halt: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Include(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Include: ...
        def __new__(cls, _0:Include) -> Instruction.Include: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Jump(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Jump: ...
        def __new__(cls, _0:Jump) -> Instruction.Jump: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class JumpUnless(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> JumpUnless: ...
        def __new__(cls, _0:JumpUnless) -> Instruction.JumpUnless: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class JumpWhen(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> JumpWhen: ...
        def __new__(cls, _0:JumpWhen) -> Instruction.JumpWhen: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Label(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Label: ...
        def __new__(cls, _0:Label) -> Instruction.Label: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Load(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Load: ...
        def __new__(cls, _0:Load) -> Instruction.Load: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class MeasureCalibrationDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> MeasureCalibrationDefinition: ...
        def __new__(cls, _0:MeasureCalibrationDefinition) -> Instruction.MeasureCalibrationDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Measurement(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Measurement: ...
        def __new__(cls, _0:Measurement) -> Instruction.Measurement: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Move(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Move: ...
        def __new__(cls, _0:Move) -> Instruction.Move: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Nop(Instruction):
        __match_args__ = ((),)
        def __new__(cls) -> Instruction.Nop: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Pragma(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Pragma: ...
        def __new__(cls, _0:Pragma) -> Instruction.Pragma: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Pulse(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Pulse: ...
        def __new__(cls, _0:Pulse) -> Instruction.Pulse: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class RawCapture(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> RawCapture: ...
        def __new__(cls, _0:RawCapture) -> Instruction.RawCapture: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Reset(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Reset: ...
        def __new__(cls, _0:Reset) -> Instruction.Reset: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class SetFrequency(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> SetFrequency: ...
        def __new__(cls, _0:SetFrequency) -> Instruction.SetFrequency: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class SetPhase(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> SetPhase: ...
        def __new__(cls, _0:SetPhase) -> Instruction.SetPhase: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class SetScale(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> SetScale: ...
        def __new__(cls, _0:SetScale) -> Instruction.SetScale: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class ShiftFrequency(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> ShiftFrequency: ...
        def __new__(cls, _0:ShiftFrequency) -> Instruction.ShiftFrequency: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class ShiftPhase(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> ShiftPhase: ...
        def __new__(cls, _0:ShiftPhase) -> Instruction.ShiftPhase: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Store(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Store: ...
        def __new__(cls, _0:Store) -> Instruction.Store: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class SwapPhases(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> SwapPhases: ...
        def __new__(cls, _0:SwapPhases) -> Instruction.SwapPhases: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class UnaryLogic(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> UnaryLogic: ...
        def __new__(cls, _0:UnaryLogic) -> Instruction.UnaryLogic: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class WaveformDefinition(Instruction):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> WaveformDefinition: ...
        def __new__(cls, _0:WaveformDefinition) -> Instruction.WaveformDefinition: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Wait(Instruction):
        __match_args__ = ((),)
        def __new__(cls) -> Instruction.Wait: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    

class Jump:
    @property
    def target(self) -> Target: ...
    @target.setter
    def target(self, value: Target) -> None: ...

class JumpUnless:
    @property
    def target(self) -> Target: ...
    @property
    def condition(self) -> MemoryReference: ...
    @target.setter
    def target(self, value: Target) -> None: ...
    @condition.setter
    def condition(self, value: MemoryReference) -> None: ...

class JumpWhen:
    @property
    def target(self) -> Target: ...
    @property
    def condition(self) -> MemoryReference: ...
    @target.setter
    def target(self, value: Target) -> None: ...
    @condition.setter
    def condition(self, value: MemoryReference) -> None: ...

class Label:
    @property
    def target(self) -> Target: ...

class Load:
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def source(self) -> builtins.str: ...
    @property
    def offset(self) -> MemoryReference: ...

class MeasureCalibrationDefinition:
    @property
    def identifier(self) -> MeasureCalibrationIdentifier: ...
    @property
    def instructions(self) -> builtins.list[Instruction]: ...
    @identifier.setter
    def identifier(self, value: MeasureCalibrationIdentifier) -> None: ...
    @instructions.setter
    def instructions(self, value: builtins.list[Instruction]) -> None: ...

class MeasureCalibrationIdentifier:
    r"""
    A unique identifier for a measurement calibration definition within a program
    """
    @property
    def qubit(self) -> typing.Optional[Qubit]:
        r"""
        The qubit which is the target of measurement, if any
        """
    @property
    def parameter(self) -> builtins.str:
        r"""
        The memory region name to which the measurement result is written
        """
    @qubit.setter
    def qubit(self, value: typing.Optional[Qubit]) -> None:
        r"""
        The qubit which is the target of measurement, if any
        """
    @parameter.setter
    def parameter(self, value: builtins.str) -> None:
        r"""
        The memory region name to which the measurement result is written
        """
    def __new__(cls, qubit:typing.Optional[Qubit], parameter:builtins.str) -> MeasureCalibrationIdentifier: ...

class Measurement:
    @property
    def qubit(self) -> Qubit: ...
    @property
    def target(self) -> typing.Optional[MemoryReference]: ...

class MemoryReference:
    @property
    def name(self) -> builtins.str: ...
    @property
    def index(self) -> builtins.int: ...

class Move:
    @property
    def destination(self) -> MemoryReference: ...
    @property
    def source(self) -> ArithmeticOperand: ...

class Offset:
    ...

class PauliSum:
    @property
    def arguments(self) -> builtins.list[builtins.str]: ...
    @property
    def terms(self) -> builtins.list[PauliTerm]: ...
    def __new__(cls, arguments:typing.Sequence[builtins.str], terms:typing.Sequence[PauliTerm]) -> PauliSum: ...

class PauliTerm:
    @property
    def arguments(self) -> builtins.list[tuple[PauliGate, builtins.str]]: ...
    @property
    def expression(self) -> Expression: ...
    def __new__(cls, arguments:typing.Sequence[tuple[PauliGate, builtins.str]], expression:Expression) -> PauliTerm: ...

class Pragma:
    @property
    def name(self) -> builtins.str: ...
    @property
    def arguments(self) -> builtins.list[PragmaArgument]: ...
    @property
    def data(self) -> typing.Optional[builtins.str]: ...

class PragmaArgument:
    class Identifier(PragmaArgument):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> PragmaArgument.Identifier: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Integer(PragmaArgument):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0:builtins.int) -> PragmaArgument.Integer: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class Pulse:
    @property
    def blocking(self) -> builtins.bool: ...
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def waveform(self) -> WaveformInvocation: ...
    @blocking.setter
    def blocking(self, value: builtins.bool) -> None: ...
    @frame.setter
    def frame(self, value: FrameIdentifier) -> None: ...
    @waveform.setter
    def waveform(self, value: WaveformInvocation) -> None: ...

class Qubit:
    class Fixed(Qubit):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0:builtins.int) -> Qubit.Fixed: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Placeholder(Qubit):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> QubitPlaceholder: ...
        def __new__(cls, _0:QubitPlaceholder) -> Qubit.Placeholder: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Variable(Qubit):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> Qubit.Variable: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class QubitPlaceholder:
    r"""
    An opaque placeholder for a qubit whose index may be assigned at a later time.
    """
    ...

class RawCapture:
    @property
    def blocking(self) -> builtins.bool: ...
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def duration(self) -> Expression: ...
    @property
    def memory_reference(self) -> MemoryReference: ...

class Reset:
    @property
    def qubit(self) -> typing.Optional[Qubit]: ...

class SetFrequency:
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def frequency(self) -> Expression: ...

class SetPhase:
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def phase(self) -> Expression: ...

class SetScale:
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def scale(self) -> Expression: ...

class Sharing:
    ...

class ShiftFrequency:
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def frequency(self) -> Expression: ...

class ShiftPhase:
    @property
    def frame(self) -> FrameIdentifier: ...
    @property
    def phase(self) -> Expression: ...

class Store:
    @property
    def destination(self) -> builtins.str: ...
    @property
    def offset(self) -> MemoryReference: ...
    @property
    def source(self) -> ArithmeticOperand: ...

class SwapPhases:
    @property
    def frame_1(self) -> FrameIdentifier: ...
    @property
    def frame_2(self) -> FrameIdentifier: ...

class Target:
    class Fixed(Target):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0:builtins.str) -> Target.Fixed: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    class Placeholder(Target):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> TargetPlaceholder: ...
        def __new__(cls, _0:TargetPlaceholder) -> Target.Placeholder: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key:builtins.int) -> typing.Any: ...
    
    ...

class TargetPlaceholder:
    r"""
    An opaque placeholder for a label whose index may be assigned
    at a later time.
    """
    @property
    def base_label(self) -> builtins.str: ...
    def __new__(cls, base_label:builtins.str) -> TargetPlaceholder: ...

class UnaryLogic:
    @property
    def operator(self) -> UnaryOperator: ...
    @property
    def operand(self) -> MemoryReference: ...

class Vector:
    @property
    def data_type(self) -> ScalarType: ...
    @property
    def length(self) -> builtins.int: ...

class Waveform:
    @property
    def matrix(self) -> builtins.list[Expression]: ...
    @property
    def parameters(self) -> builtins.list[builtins.str]: ...
    def __new__(cls, matrix:typing.Sequence[Expression], parameters:typing.Sequence[builtins.str]) -> Waveform: ...

class WaveformDefinition:
    @property
    def name(self) -> builtins.str: ...
    @property
    def definition(self) -> Waveform: ...

class WaveformInvocation:
    @property
    def name(self) -> builtins.str: ...
    @property
    def parameters(self) -> builtins.dict[builtins.str, Expression]: ...

class BinaryOperand(Enum):
    LiteralInteger = ...
    MemoryReference = ...

class ComparisonOperator(Enum):
    Equal = ...
    GreaterThanOrEqual = ...
    GreaterThan = ...
    LessThanOrEqual = ...
    LessThan = ...

class GateModifier(Enum):
    r"""
    An enum of all the possible modifiers on a quil [`Gate`]
    """
    Controlled = ...
    r"""
    The `CONTROLLED` modifier makes the gate take an extra [`Qubit`] parameter as a control
    qubit.
    """
    Dagger = ...
    r"""
    The `DAGGER` modifier does a complex-conjugate transpose on the [`Gate`].
    """
    Forked = ...
    r"""
    The `FORKED` modifier allows an alternate set of parameters to be used based on the state
    of a qubit.
    """

class PauliGate(Enum):
    I = ...
    X = ...
    Y = ...
    Z = ...

class ScalarType(Enum):
    Bit = ...
    Integer = ...
    Octet = ...
    Real = ...

class UnaryOperator(Enum):
    Neg = ...
    Not = ...

