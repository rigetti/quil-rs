name: Publish quil-rs and quil-py

on:
  release:
    types: [published]
  workflow_dispatch:
    description: "Manually publish release"
    inputs:
      publishWheels:
        description: "Build and publish wheels to PyPI"
        type: boolean
        default: false
      publishCrate:
        description: "Publish quil-rs to crates.io"
        type: boolean
        default: false

jobs:
  is-release:
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.event.release.tag_name, 'quil-rs/v') }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "Release tag starts with quil-rs/v, proceeding with release"
  should-publish-wheels:
    if: (github.event_name == 'workflow_dispatch' && inputs.publishWheels) || (github.event_name == 'release' && !github.event.release.prerelease)
    runs-on: ubuntu-latest
    steps:
      - run: echo "Publishing wheels"
  should-publish-crate:
    if: (github.event_name == 'workflow_dispatch' && inputs.publishCrate) || (github.event_name == 'release' && !github.event.release.prerelease)
    runs-on: ubuntu-latest
    steps:
      - run: echo "Publishing wheels"

  publish-quil-rs:
    name: Publish quil-rs 
    needs: [ is-release, should-publish-crate ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo publish -p quil-rs --locked --token ${{ secrets.CRATES_IO_TOKEN }}

  sdist:
    name: Build a source distribution
    runs-on: ubuntu-latest
    needs: is-release
    steps:
    - uses: actions/checkout@v5
    - uses: Swatinem/rust-cache@v2
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Build sdist
      uses: messense/maturin-action@v1
      with:
        working-directory: quil-rs
        command: sdist
        args: --out dist
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: quil-rs/dist

  build-wheels:
    name: Build Wheel ${{ matrix.platform.name }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
    runs-on: ${{ matrix.platform.os }}
    needs: [ is-release, should-publish-wheels ]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        platform:
          [
            { os: "ubuntu-latest",  target: "x86_64",  venv: "./quil-rs/.venv", name: "linux" },
            { os: "ubuntu-latest",  target: "aarch64", venv: "./quil-rs/.venv", name: "linux" },
            { os: "ubuntu-latest",  target: "ppc64le", venv: "./quil-rs/.venv", name: "linux" },
            { os: "macos-latest",   target: "universal2-apple-darwin", venv: "./quil-rs/.venv", name: "macos" },
            { os: "windows-latest", target: "x86_64-pc-windows-msvc",  venv: '.\quil-rs\.venv', name: "windows" },
          ]
    steps:
      - name: Set git config for long paths (Windows only)
        if: startsWith(matrix.platform.os, 'windows')
        run: git config --global core.longpaths true

      - uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build Wheel
        uses: messense/maturin-action@v1
        with:
          working-directory: quil-rs
          target: ${{ matrix.platform.target }}
          manylinux: auto
          args: --release --features python,extension-module -i ${{ matrix.python-version }} --out dist

      - name: Install Wheel
        if: ${{ matrix.platform.name != 'linux' || matrix.platform.target == "x86_64" }}
        run: |
          pip install quil --pre --find-links quil-rs/dist --force-reinstall
          python -c "import quil"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: quil-rs/dist

  publish-python-package:
    name: Publish quil
    runs-on: ubuntu-latest
    # `needs` forces this job to wait until all specified jobs
    # are finished to run. Typically, those jobs would all have
    # to be successful, but when combined with `if: always()`,
    # this job is allowed to run after all the needed jobs
    # finish, regardless of their outcome. In this case, we
    # still make sure that at least a source distribution
    # can be published.
    needs: [ build-wheels, sdist ]
    if: always() && needs.sdist.result == 'success'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheels-*
          merge-multiple: true
      - run: ls -R wheels
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        with:
          command: upload
          args: --skip-existing wheels/*
